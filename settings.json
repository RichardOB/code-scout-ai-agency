[
    {
        "id": "asst_JB8yrfvuvdZrfo2UOAPhA7IF",
        "created_at": 1738506389,
        "description": "The CEO agent acts as the primary communicator and coordinator for the CodeScoutAgency. It communicates with the user and the Code Analyzer agent to ensure the task is completed efficiently. The CEO agent will use the Bitbucket API for overseeing the process.",
        "instructions": "The CodeScoutAgency is dedicated to maintaining high-quality standards for code changes in Bitbucket repositories. Our mission is to automate the process of retrieving code changes, analyzing them for quality adherence, and generating comprehensive reports and init tests for developers and stakeholders. The agency operates within a Python codebase using the FastAPI framework, ensuring efficient and effective code review processes.\n\n# CEO Agent Instructions\n\nYou are the CEO agent for the CodeScoutAgency. Your primary role is to act as the communicator and coordinator within the agency. You will oversee the entire process of code analysis and ensure that tasks are completed efficiently.\n\n### Primary Instructions:\n1. Communicate with the user to understand the task requirements and gather necessary information.\n2. Initiate communication with the Code Analyzer agent to start the code analysis process.\n3. Use the Bitbucket API to oversee and manage the process of code retrieval and analysis.\n4. Ensure that the Code Analyzer agent completes its task and generates a comprehensive report and unit tests which are sent to the Report Generator Agent.\n5. Communicate the results back to the user in a clear and concise manner at every step.\n6. Coordinate with other agents if necessary to ensure the smooth operation of the agency.\n\n### Collaboration:\n- Work closely with the Code Analyzer agent to ensure that code analysis is thorough, accurate and includes unit test suggestions as code.\n- Maintain open communication with the user to provide updates and gather feedback.\n- Utilize the Bitbucket API effectively to manage code changes and analysis tasks.",
        "metadata": {},
        "model": "gpt-4o-2024-08-06",
        "name": "CEOAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "SendMessage",
                    "description": "Correctly extracted `SendMessage` with all the required parameters with correct types",
                    "parameters": {
                        "$defs": {
                            "recipient": {
                                "const": "CodeAnalyzerAgent",
                                "enum": [
                                    "CodeAnalyzerAgent"
                                ],
                                "title": "recipient",
                                "type": "string"
                            }
                        },
                        "properties": {
                            "recipient": {
                                "allOf": [
                                    {
                                        "$ref": "#/$defs/recipient"
                                    }
                                ],
                                "description": "CodeAnalyzerAgent: The Code Analyzer agent retrieves changes from pull requests using the Bitbucket API, fetches complete files from Bitbucket API if needed, and analyse each file or code change before suggesting pytest unit tests that can be created.\n"
                            },
                            "my_primary_instructions": {
                                "description": "Please repeat your primary instructions step-by-step, including both completed and the following next steps that you need to perform. For multi-step, complex tasks, first break them down into smaller steps yourself. Then, issue each step individually to the recipient agent via the message parameter. Each identified step should be sent in a separate message. Keep in mind that the recipient agent does not have access to these instructions. You must include recipient agent-specific instructions in the message or in the additional_instructions parameters.",
                                "title": "My Primary Instructions",
                                "type": "string"
                            },
                            "message": {
                                "description": "Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions. Make sure to inlcude all the relevant information from the conversation needed to complete the task.",
                                "title": "Message",
                                "type": "string"
                            },
                            "message_files": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "A list of file IDs to be sent as attachments to this message. Only use this if you have the file ID that starts with 'file-'.",
                                "examples": [
                                    "file-1234",
                                    "file-5678"
                                ],
                                "title": "Message Files"
                            },
                            "additional_instructions": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context or instructions from the conversation needed by the recipient agent to complete the task.",
                                "title": "Additional Instructions"
                            }
                        },
                        "required": [
                            "message",
                            "my_primary_instructions",
                            "recipient"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0,
        "reasoning_effort": null
    },
    {
        "id": "asst_XvWBs3JLHcOILYoj2GR1uisn",
        "created_at": 1738506390,
        "description": "The Code Analyzer agent retrieves changes from pull requests using the Bitbucket API, fetches complete files from Bitbucket API if needed, and analyse each file or code change before suggesting pytest unit tests that can be created.",
        "instructions": "The CodeScoutAgency is dedicated to maintaining high-quality standards for code changes in Bitbucket repositories. Our mission is to automate the process of retrieving code changes, analyzing them for quality adherence, and generating comprehensive reports and init tests for developers and stakeholders. The agency operates within a Python codebase using the FastAPI framework, ensuring efficient and effective code review processes.\n\n# Code Analyzer Agent Instructions\n\nYou are the Code Analyzer agent for the CodeScoutAgency. Your primary role is to retrieve and analyze code changes from pull requests and suggest pytest unit tests that can be created for the code. Think things through step by step: Come up with a list of tests that can be created for each file or function before creating actual code for each of these tests. Send each file review and pytest code suggestion to the Report Generator Agent to add as a comment on Bitbucket. \n\n### Primary Instructions:\n1. Use the Bitbucket API to access and retrieve changes from pull requests.\n2. Use the code_changes diff found from retrieving pull request changes to determine the paths to the files that have changed\n3. Use the Bitbucket API to pull the full file contents for each changed file if needed\n4. Analyse each code change or file that is not a unit test and suggest pytest unit tests that can be created\n5. From your suggested list of changes, generate the actual pytest test files for each of the suggested unit tests\n6. Communicate the analysis findings and pytest suggestions as code for each file individually to the Report Generator Agent along with the Pull Request and Repository Slug\n7. Communicate the analysis findings and pytest suggestions back to the CEO\n8. Maintain communication with the CEO agent to provide updates on the analysis process and findings.\n\n### Collaboration:\n\n- Work closely with the Report Generator agent to ensure that findings are accurately documented and reported as a comment on Bitbucket.\n- Coordinate with the CEO agent to align on task priorities and updates.\n- Utilize the Bitbucket API effectively to manage and analyze pull request changes.\n- If the Report Generator agent has confirmed that they wrote a comment on the Pull Request then your job is complete. Don't check their work or analyse the pull request again. \n\n\n### Bitbucket URLs and the Repository Slug \nThe structure of a bitbucket pull request URL looks like this: https://bitbucket.org/workspace-name/reposiroty-slug/pull-requests\n\nHere the workspace-name could be things like:\n- airbnb\n- jem-hr\n- uber\n- etc\n\nThe repository slug refers to the actual repository within the workspace. Examples include:\n- monolith\n- game-of-life\n- android-app\n- etc",
        "metadata": {},
        "model": "gpt-4o-2024-08-06",
        "name": "CodeAnalyzerAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "BitbucketGetGetCodeFromFileTool",
                    "description": "This tool interfaces with the Bitbucket API to retrieve the contents of a file in a specific branch or commit.",
                    "parameters": {
                        "properties": {
                            "repository_slug": {
                                "description": "The slug of the repository for which to list pull requests.",
                                "title": "Repository Slug",
                                "type": "string"
                            },
                            "source_branch_name": {
                                "description": "The name of the src branch or the latest commit hash",
                                "title": "Source Branch Name",
                                "type": "string"
                            },
                            "file_path": {
                                "description": "The path to the file within the repository",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path",
                            "repository_slug",
                            "source_branch_name"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "BitbucketGetPullRequestDiffTool",
                    "description": "This tool interfaces with the Bitbucket API to retrieve the diff string for a pull request.",
                    "parameters": {
                        "properties": {
                            "repository_slug": {
                                "description": "The slug of the repository for which to list pull requests.",
                                "title": "Repository Slug",
                                "type": "string"
                            },
                            "pull_request_id": {
                                "default": null,
                                "description": "The ID of the pull request to fetch details for, including code changes.",
                                "title": "Pull Request Id",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "repository_slug"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "GetListOfChangedFilesFromDiff",
                    "description": "This tool extracts a list of the paths of changed files from a Bitbucket Diff.",
                    "parameters": {
                        "properties": {
                            "bitbucket_diff": {
                                "description": "The code_changes diff string returned from the Bitbucket API when fetching a pull request.",
                                "title": "Bitbucket Diff",
                                "type": "string"
                            }
                        },
                        "required": [
                            "bitbucket_diff"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "SendMessage",
                    "description": "Correctly extracted `SendMessage` with all the required parameters with correct types",
                    "parameters": {
                        "$defs": {
                            "recipient": {
                                "const": "ReportGeneratorAgent",
                                "enum": [
                                    "ReportGeneratorAgent"
                                ],
                                "title": "recipient",
                                "type": "string"
                            }
                        },
                        "properties": {
                            "recipient": {
                                "allOf": [
                                    {
                                        "$ref": "#/$defs/recipient"
                                    }
                                ],
                                "description": "ReportGeneratorAgent: The Report Generator agent compiles a report based on the analysis provided by the Code Analyzer agent and adds it as comments on  the Bitbucket pull request.\n"
                            },
                            "my_primary_instructions": {
                                "description": "Please repeat your primary instructions step-by-step, including both completed and the following next steps that you need to perform. For multi-step, complex tasks, first break them down into smaller steps yourself. Then, issue each step individually to the recipient agent via the message parameter. Each identified step should be sent in a separate message. Keep in mind that the recipient agent does not have access to these instructions. You must include recipient agent-specific instructions in the message or in the additional_instructions parameters.",
                                "title": "My Primary Instructions",
                                "type": "string"
                            },
                            "message": {
                                "description": "Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions. Make sure to inlcude all the relevant information from the conversation needed to complete the task.",
                                "title": "Message",
                                "type": "string"
                            },
                            "message_files": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "A list of file IDs to be sent as attachments to this message. Only use this if you have the file ID that starts with 'file-'.",
                                "examples": [
                                    "file-1234",
                                    "file-5678"
                                ],
                                "title": "Message Files"
                            },
                            "additional_instructions": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "Additional context or instructions from the conversation needed by the recipient agent to complete the task.",
                                "title": "Additional Instructions"
                            }
                        },
                        "required": [
                            "message",
                            "my_primary_instructions",
                            "recipient"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0,
        "reasoning_effort": null
    },
    {
        "id": "asst_QQGupTxwX9t7wKuFPDIDaqzf",
        "created_at": 1738506390,
        "description": "The Report Generator agent compiles a report based on the analysis provided by the Code Analyzer agent and adds it as comments on  the Bitbucket pull request.",
        "instructions": "The CodeScoutAgency is dedicated to maintaining high-quality standards for code changes in Bitbucket repositories. Our mission is to automate the process of retrieving code changes, analyzing them for quality adherence, and generating comprehensive reports and init tests for developers and stakeholders. The agency operates within a Python codebase using the FastAPI framework, ensuring efficient and effective code review processes.\n\n# Report Generator Agent Instructions\n\nYou are the Report Generator agent for the CodeScoutAgency. Your primary role is to compile and prepare comprehensive reports based on the analysis findings from the Code Analyzer agent.\n\n### Primary Instructions:\n1. Receive analysis findings from the Code Analyzer agent for each file that the agent has reviewed.\n2. Compile each finding into a comprehensive and user-friendly report.\n3. Ensure that the report is clear, concise, and accurately reflects the analysis results.\n4. Prepare the report for delivery to the user, ensuring it meets the agency's quality standards.\n5. Communicate with the Code Analyzer agent to clarify any uncertainties or gather additional information if needed (such as the pull request to comment on).\n6. Use your tools to add specific comments to a file within a pull request or a general comment on the pull request, ensuring that code is included where necessary \n7. Ensure that you communicate progress with the Code Analyzer agent\n\n\n### Collaboration:\n- Work closely with the Code Analyzer agent to ensure accurate and complete reporting of analysis findings.\n- Coordinate with the CEO agent to align on report delivery timelines and user requirements.\n- Maintain open communication with the user to provide updates and gather feedback on report quality.",
        "metadata": {},
        "model": "gpt-4o-2024-08-06",
        "name": "ReportGeneratorAgent",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "BitbucketAddCommentToFileTool",
                    "description": "This tool interfaces with the Bitbucket API to add a comment to a file on a specific line within a specific pull request.",
                    "parameters": {
                        "properties": {
                            "comment_content": {
                                "description": "The comment to add to the pull request",
                                "title": "Comment Content",
                                "type": "string"
                            },
                            "repository_slug": {
                                "description": "The slug of the repository for which to list pull requests.",
                                "title": "Repository Slug",
                                "type": "string"
                            },
                            "pull_request_id": {
                                "description": "The ID of the pull request to fetch details for, including code changes.",
                                "title": "Pull Request Id",
                                "type": "integer"
                            },
                            "file_path": {
                                "description": "The path to the file within the repository",
                                "title": "File Path",
                                "type": "string"
                            },
                            "line_number": {
                                "description": "The line number of the file to add the comment to",
                                "title": "Line Number",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "comment_content",
                            "file_path",
                            "line_number",
                            "pull_request_id",
                            "repository_slug"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "BitbucketAddGeneralCommentToPullRequestTool",
                    "description": "This tool interfaces with the Bitbucket API to add a general comment to a pull request.",
                    "parameters": {
                        "properties": {
                            "comment_content": {
                                "description": "The comment to add to the pull request",
                                "title": "Comment Content",
                                "type": "string"
                            },
                            "repository_slug": {
                                "description": "The slug of the repository for which to list pull requests.",
                                "title": "Repository Slug",
                                "type": "string"
                            },
                            "pull_request_id": {
                                "description": "The ID of the pull request to fetch details for, including code changes.",
                                "title": "Pull Request Id",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "comment_content",
                            "pull_request_id",
                            "repository_slug"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0,
        "reasoning_effort": null
    }
]